import pytest
import numpy as np

from prob1base import (
    StateVars, 
    DefaultModel01,
    ModelConsts,
    Mx_reg,
    My_reg,
    Dx_reg,
    Dy_reg,
)

# --- Test Configuration ---
TOL_RTOL = 1e-9 
TOL_ATOL = 1e-12
SEED = 20250503  # Seed for reproducible random numbers (Updated for current date)

N, M = 7, 5

R0 = 8.3144621
Ea = 1.60217662e-19
default_model = DefaultModel01(ModelConsts(
    R0=R0,
    Ea=Ea,
    K1=1e-2,
    K2=1e-2,
    K3=1e-2,
    K4=1e-2,
    DT=1e-3,
    Dl_max=8.01e-4,
    phi_l=1e-5,
    gamma_T=1e-9,
    Kd=1e-8,
    Sd=10,
    Dd_max=2.46e-6,
    phi_d=1e-5,
    phi_T=Ea / R0,
    r_sp=5e-2,
))

@pytest.fixture
def model_fixture():
    return default_model

# --- Fixtures ---
@pytest.fixture
def grid_params_fixture():
    """Provides grid spacing parameters."""
    x = np.linspace(0, 1, N + 1)
    y = np.linspace(0, 1, M + 1)
    h = np.concatenate([np.array([np.inf]), x[1:] - x[:-1]])
    k = np.concatenate([np.array([np.inf]), y[1:] - y[:-1]])
    kk, hh = np.meshgrid(k, h)
    return {"hh": hh, "kk": kk}

@pytest.fixture
def input_arrays_fixture():
    """Generates consistent random input arrays using a fixed seed."""
    rng = np.random.default_rng(SEED)
    Np1 = N+1
    Mp1 = M+1
    cp = rng.random((Np1, Mp1)) + 0.1
    T = (rng.random((Np1, Mp1)) * 100) + 273.15
    cl = rng.random((Np1, Mp1))
    cd = rng.random((Np1, Mp1))
    cs = rng.random((Np1, Mp1))
    return {"cp": cp, "T": T, "cl": cl, "cd": cd, "cs": cs}

@pytest.fixture
def grid_pack_fixture(input_arrays_fixture, model_fixture, grid_params_fixture):
    """Creates an instance of StateVars for testing."""
    pack = StateVars(  # Use the immutable class
        **input_arrays_fixture,
        model=model_fixture,
        **grid_params_fixture
    )
    return pack

# --- Helper for Re-calculating Expected Values (Identical to before) ---
def expected_Dl(x): return default_model.Dl(x)
def expected_dDl(x): return default_model.Dl(x, d=1)
def expected_V1(x): return default_model.V1(x)
def expected_V2(x): return default_model.V2(x)
def expected_dV1(x): return default_model.V1(x, d=1)
def expected_dV2(x): return default_model.V2(x, d=1)
def expected_Dd(x, y): return default_model.Dd(x, y)
def expected_delcp_Dd(x, y): return default_model.Dd(x, y, d=(1,0))
def expected_delT_Dd(x, y): return default_model.Dd(x, y, d=(0,1))

# --- Test Functions ---

def test_initialization(grid_pack_fixture, input_arrays_fixture, grid_params_fixture, model_fixture):
    """Verify basic initialization and storage of parameters via properties."""
    pack = grid_pack_fixture
    # Test parameter properties
    assert np.allclose(pack.hh, grid_params_fixture["hh"], rtol=TOL_RTOL, atol=TOL_ATOL)
    assert np.allclose(pack.kk, grid_params_fixture["kk"], rtol=TOL_RTOL, atol=TOL_ATOL)
    assert pack.model is model_fixture

    # Test input data properties
    np.testing.assert_array_equal(pack.cp, input_arrays_fixture["cp"])
    np.testing.assert_array_equal(pack.T, input_arrays_fixture["T"])
    np.testing.assert_array_equal(pack.cl, input_arrays_fixture["cl"])
    np.testing.assert_array_equal(pack.cd, input_arrays_fixture["cd"])
    np.testing.assert_array_equal(pack.cs, input_arrays_fixture["cs"])

def test_input_properties_identity(grid_pack_fixture):
    """Verify input properties return the originally stored data reference."""
    pack = grid_pack_fixture
    # Check if the property returns the same object stored internally (usually true for NumPy arrays unless copied)
    assert pack.cp is pack._cp_data
    assert pack.T is pack._T_data
    # ... etc for cl, cd, cs

# Note: Caching test for *input* properties is less meaningful now, as they aren't lazy.
# The main caching tests apply to the *computed* properties generated by the decorator.

def test_average_properties(grid_pack_fixture, input_arrays_fixture):
    """Verify calculation and caching of average properties (Mx, My)."""
    pack = grid_pack_fixture
    inputs = input_arrays_fixture

    expected_MxT = Mx_reg(inputs["T"])
    expected_MyT = My_reg(inputs["T"])
    expected_Mxcp = Mx_reg(inputs["cp"])
    expected_Mycp = My_reg(inputs["cp"])

    np.testing.assert_allclose(pack.MxT, expected_MxT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.MyT, expected_MyT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Mxcp, expected_Mxcp, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Mycp, expected_Mycp, rtol=TOL_RTOL, atol=TOL_ATOL)

    # Test caching (object identity)
    MxT_first = pack.MxT
    MyT_first = pack.MyT
    Mxcp_first = pack.Mxcp
    Mycp_first = pack.Mycp
    assert pack.MxT is MxT_first
    assert pack.MyT is MyT_first
    assert pack.Mxcp is Mxcp_first
    assert pack.Mycp is Mycp_first

def test_derivative_properties(grid_pack_fixture, input_arrays_fixture, grid_params_fixture):
    """Verify calculation and caching of derivative properties (Dx, Dy)."""
    pack = grid_pack_fixture
    inputs = input_arrays_fixture
    params = grid_params_fixture

    expected_DmxT = Dx_reg(inputs["T"], params["hh"])
    # ... calculate other expected derivatives ...
    expected_DmyT = Dy_reg(inputs["T"], params["kk"])
    expected_Dmxcl = Dx_reg(inputs["cl"], params["hh"])
    expected_Dmycl = Dy_reg(inputs["cl"], params["kk"])
    expected_Dmxcd = Dx_reg(inputs["cd"], params["hh"])
    expected_Dmycd = Dy_reg(inputs["cd"], params["kk"])

    np.testing.assert_allclose(pack.DmxT, expected_DmxT, rtol=TOL_RTOL, atol=TOL_ATOL)
    # ... assert others ...
    np.testing.assert_allclose(pack.DmyT, expected_DmyT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Dmxcl, expected_Dmxcl, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Dmycl, expected_Dmycl, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Dmxcd, expected_Dmxcd, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Dmycd, expected_Dmycd, rtol=TOL_RTOL, atol=TOL_ATOL)

    # Test caching
    DmxT_first = pack.DmxT
    Dmycl_first = pack.Dmycl
    assert pack.DmxT is DmxT_first
    assert pack.DmyT is pack.DmyT
    assert pack.Dmxcl is pack.Dmxcl
    assert pack.Dmycl is Dmycl_first
    assert pack.Dmxcd is pack.Dmxcd
    assert pack.Dmycd is pack.Dmycd

def test_Dl_properties(grid_pack_fixture, model_fixture):
    """Verify calculation and caching of Dl-related properties."""
    pack = grid_pack_fixture
    model = model_fixture

    Mxcp_val = pack.Mxcp # Trigger prerequisite computation
    Mycp_val = pack.Mycp # Trigger prerequisite computation

    expected_Dl_Mxcp = expected_Dl(Mxcp_val)
    # ... calculate other expected Dl ...
    expected_Dl_Mycp = expected_Dl(Mycp_val)
    expected_dDl_Mxcp = expected_dDl(Mxcp_val)
    expected_dDl_Mycp = expected_dDl(Mycp_val)

    np.testing.assert_allclose(pack.Dl_Mxcp, expected_Dl_Mxcp, rtol=TOL_RTOL, atol=TOL_ATOL)
    # ... assert others ...
    np.testing.assert_allclose(pack.Dl_Mycp, expected_Dl_Mycp, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.dDl_Mxcp, expected_dDl_Mxcp, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.dDl_Mycp, expected_dDl_Mycp, rtol=TOL_RTOL, atol=TOL_ATOL)

    # Test caching
    Dl_Mxcp_first = pack.Dl_Mxcp
    dDl_Mycp_first = pack.dDl_Mycp
    assert pack.Dl_Mxcp is Dl_Mxcp_first
    assert pack.Dl_Mycp is pack.Dl_Mycp
    assert pack.dDl_Mxcp is pack.dDl_Mxcp
    assert pack.dDl_Mycp is dDl_Mycp_first

def test_V_properties(grid_pack_fixture, model_fixture, input_arrays_fixture):
    """Verify calculation and caching of V-related properties."""
    pack = grid_pack_fixture
    model = model_fixture
    T_val = pack.T # Access via property

    expected_V1T = expected_V1(T_val)
    # ... calculate other expected V ...
    expected_V2T = expected_V2(T_val)
    expected_dV1T = expected_dV1(T_val)
    expected_dV2T = expected_dV2(T_val)

    np.testing.assert_allclose(pack.V1T, expected_V1T, rtol=TOL_RTOL, atol=TOL_ATOL)
    # ... assert others ...
    np.testing.assert_allclose(pack.V2T, expected_V2T, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.dV1T, expected_dV1T, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.dV2T, expected_dV2T, rtol=TOL_RTOL, atol=TOL_ATOL)

    # Test caching
    V1T_first = pack.V1T
    dV2T_first = pack.dV2T
    assert pack.V1T is V1T_first
    assert pack.V2T is pack.V2T
    assert pack.dV1T is pack.dV1T
    assert pack.dV2T is dV2T_first

def test_Dd_properties(grid_pack_fixture, model_fixture):
    """Verify calculation and caching of Dd-related properties."""
    pack = grid_pack_fixture
    model = model_fixture

    Mxcp_val = pack.Mxcp # Trigger prerequisites
    MxT_val = pack.MxT
    Mycp_val = pack.Mycp
    MyT_val = pack.MyT

    expected_Dd_MxcpT = expected_Dd(Mxcp_val, MxT_val)
    # ... calculate other expected Dd ...
    expected_Dd_MycpT = expected_Dd(Mycp_val, MyT_val)
    expected_delcp_Dd_MxcpT = expected_delcp_Dd(Mxcp_val, MxT_val)
    expected_delcp_Dd_MycpT = expected_delcp_Dd(Mycp_val, MyT_val)
    expected_delT_Dd_MxcpT = expected_delT_Dd(Mxcp_val, MxT_val)
    expected_delT_Dd_MycpT = expected_delT_Dd(Mycp_val, MyT_val)

    np.testing.assert_allclose(pack.Dd_MxcpT, expected_Dd_MxcpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    # ... assert others ...
    np.testing.assert_allclose(pack.Dd_MycpT, expected_Dd_MycpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.delcp_Dd_MxcpT, expected_delcp_Dd_MxcpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.delcp_Dd_MycpT, expected_delcp_Dd_MycpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.delT_Dd_MxcpT, expected_delT_Dd_MxcpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.delT_Dd_MycpT, expected_delT_Dd_MycpT, rtol=TOL_RTOL, atol=TOL_ATOL)

    # Test caching
    Dd_MxcpT_first = pack.Dd_MxcpT
    delT_Dd_MycpT_first = pack.delT_Dd_MycpT
    assert pack.Dd_MxcpT is Dd_MxcpT_first
    assert pack.Dd_MycpT is pack.Dd_MycpT
    assert pack.delcp_Dd_MxcpT is pack.delcp_Dd_MxcpT
    assert pack.delcp_Dd_MycpT is pack.delcp_Dd_MycpT
    assert pack.delT_Dd_MxcpT is pack.delT_Dd_MxcpT
    assert pack.delT_Dd_MycpT is delT_Dd_MycpT_first


def test_dependency_caching(input_arrays_fixture, model_fixture, grid_params_fixture):
    """Explicitly test that accessing a dependent property caches its prerequisites."""
    # Create a fresh instance for this specific test
    pack = StateVars(
        **input_arrays_fixture,
        model=model_fixture,
        **grid_params_fixture
    )

    # Check prerequisites are not cached initially using hasattr for internal cache vars
    assert not hasattr(pack, "_cache_Mxcp")
    assert not hasattr(pack, "_cache_MxT")

    # Access a property that depends on Mxcp and MxT
    Dd_MxcpT_val = pack.Dd_MxcpT

    # Check that prerequisites ARE NOW cached by checking for the cache attribute
    assert hasattr(pack, "_cache_Mxcp")
    assert hasattr(pack, "_cache_MxT")

    # Check that the final property is also cached
    assert hasattr(pack, "_cache_Dd_MxcpT")
    assert pack.Dd_MxcpT is Dd_MxcpT_val # Verify identity on second access

    # Verify values just in case
    Mxcp_val = Mx_reg(input_arrays_fixture["cp"])
    MxT_val = Mx_reg(input_arrays_fixture["T"])
    expected_Dd_MxcpT = expected_Dd(Mxcp_val, MxT_val)
    np.testing.assert_allclose(pack.Dd_MxcpT, expected_Dd_MxcpT, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.Mxcp, Mxcp_val, rtol=TOL_RTOL, atol=TOL_ATOL)
    np.testing.assert_allclose(pack.MxT, MxT_val, rtol=TOL_RTOL, atol=TOL_ATOL)

# --- New Immutability Tests ---

def test_immutability_input_properties(grid_pack_fixture):
    """Verify that input data/parameter properties are read-only."""
    pack = grid_pack_fixture

    with pytest.raises(AttributeError):
        pack.hh = 0.99 # Parameter property
    with pytest.raises(AttributeError):
        pack.kk = 0.88
    with pytest.raises(AttributeError):
        pack.model = default_model.copy() # Replace object
    with pytest.raises(AttributeError):
        pack.cp = np.zeros_like(pack.cp) # Input data property
    with pytest.raises(AttributeError):
        pack.T = None

def test_immutability_computed_properties(grid_pack_fixture):
    """Verify that computed properties are read-only."""
    pack = grid_pack_fixture

    # Trigger computation first
    _ = pack.MxT
    _ = pack.Dmxcl
    _ = pack.Dd_MxcpT

    with pytest.raises(AttributeError):
        pack.MxT = np.zeros_like(pack.MxT)
    with pytest.raises(AttributeError):
        pack.Dmxcl = None
    with pytest.raises(AttributeError):
        pack.Dd_MxcpT = 42.0

# Optional: Test prevention of new attribute creation if strict __setattr__ is used
# def test_immutability_new_attributes(grid_pack_fixture):
#     """Verify new attributes cannot be set (requires strict __setattr__)."""
#     pack = grid_pack_fixture
#     with pytest.raises(AttributeError):
#         pack.some_new_attribute = "should fail"